name: Deploy

on:
  push:
    tags:
      - '*rc*'

jobs:
  ###############################################################
  ## Deploy to VM
  ###############################################################
  deploy:
    runs-on: ubuntu-latest
    if: ${{ contains(github.ref, 'rc') }}
    environment: Dev
    steps:
    - name: Deploy to VM
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        
        # Add host to known hosts
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
        
        # Extract tag from ref
        TAG=${GITHUB_REF#refs/tags/}
        
        # SSH into server and deploy
        ssh -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "
          set -e  # Exit immediately if a command fails
          
          echo 'User: $(whoami)'
          echo 'Hostname: $(hostname)'
          echo 'OS: $(uname -a)'
          echo 'Uptime: $(uptime -p)'
          docker ps
          tmux ls
          
          cd ~/agent_api
          git fetch --all --tags
          git checkout ${TAG} -f  # Force checkout the tag
          
          # Check for existing agent_api tmux sessions and kill them if they exist
          if tmux has-session -t 'agent_api*' 2>/dev/null; then
            echo 'Killing existing agent_api sessions...'
            tmux list-sessions -F '#{session_name}' | grep '^agent_api' | while read session; do
              tmux kill-session -t \"\$session\" || true
            done
          else
            echo 'No existing agent_api sessions found'
          fi
          
          # Create new tmux session with version in name
          SESSION_NAME=\"agent_api_${TAG}\"
          tmux new-session -d -s \"\${SESSION_NAME}\" '
            source .venv/bin/activate
            uv pip install -r requirements.txt
            python main.py
          '
          
          echo \"Deployment completed successfully with session: \${SESSION_NAME}\"
        "
