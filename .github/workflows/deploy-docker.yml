name: Deploy-Docker

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy (e.g. agent-v1.0.0-rc1)'
        required: true
        type: string

jobs:
  ###############################################################
  ## Deploy to VM
  ###############################################################
  deploy:
    runs-on: ubuntu-latest
    # Only run if the input tag contains "rc"
    if: ${{ contains(inputs.tag, 'rc') }}
    environment: Dev
    steps:
      - name: Deploy to VM
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          # ---------------------------------------------------
          # Setup SSH
          # ---------------------------------------------------
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          # ---------------------------------------------------
          # Use input tag instead of ref
          # ---------------------------------------------------
          TAG=${{ inputs.tag }}

          # ---------------------------------------------------
          # SSH into the server and execute deployment
          # ---------------------------------------------------
          ssh -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "
            set -e  # Exit on error

            echo '--- Pulling new image ---'
            docker pull ryaneggz/graphchat:$TAG

            # -------------------------------------------------
            # Clean up any leftover temporary containers
            # -------------------------------------------------
            docker stop graphchat_new || true
            docker rm graphchat_new || true

            echo '--- Starting new container on port 8006 ---'
            docker run -d \
              --name graphchat_new \
              --env-file ./backend/.env \
              -p 8006:8000 \
              ryaneggz/graphchat:$TAG

            # Give the new container some time to start
            sleep 10

            echo '--- Health check on new container ---'
            if curl -f http://localhost:8006/health; then
              echo 'New container is healthy!'
              # -------------------------------------------------
              # Rename old container -> graphchat_old
              # (if it exists/running)
              # -------------------------------------------------
              if docker ps -a --format '{{.Names}}' | grep -q '^graphchat$'; then
                echo '--- Renaming old container to graphchat_old ---'
                docker rename graphchat graphchat_old || true
              fi

              echo '--- Renaming new container to graphchat ---'
              docker rename graphchat_new graphchat

              # -------------------------------------------------
              # (Optional) Remove old container
              # -------------------------------------------------
              if docker ps -a --format '{{.Names}}' | grep -q '^graphchat_old$'; then
                echo '--- Stopping and removing old container ---'
                docker stop graphchat_old || true
                docker rm graphchat_old || true
              fi

              echo '--- Restarting new container on production port (8005) ---'
              docker stop graphchat
              docker run -d \
                --name graphchat \
                --env-file ./backend/.env \
                -p 8005:8000 \
                ryaneggz/graphchat:$TAG

              echo 'Deployment successful!'
            else
              echo 'Deployment failed - health check did not pass'
              # Cleanup new container if health check fails
              docker stop graphchat_new || true
              docker rm graphchat_new || true
              exit 1
            fi
          "
